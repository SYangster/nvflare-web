---
// Import Prism to enable syntax highlighting
import Prism from "prismjs";
import "prismjs/components/prism-python.js";
import "prismjs/components/prism-bash.js"
// Directly import Prism CSS
import "prismjs/themes/prism.css";
import "prismjs/plugins/toolbar/prism-toolbar.min.css";
import "prismjs/plugins/toolbar/prism-toolbar.min";
import "prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard.min";

// import { initFlowbite } from 'flowbite';

import GoogleColab from '../images/google_colab.svg.png'


const installCode_pt = `
pip install nvflare torch torchvision
`;

const installCode_lt = `
pip install nvflare pytorch_lightning
`;

const installCode_tf = `
pip install nvflare tensorflow
`;

const clientCode_lt = `
import torch
import torchvision
import torchvision.transforms as transforms
from pytorch_lightning import LightningDataModule, Trainer, seed_everything
from src.lit_net import LitNet
from torch.utils.data import DataLoader, random_split

# (1) import nvflare lightning client API
import nvflare.client.lightning as flare

seed_everything(7)


DATASET_PATH = "/tmp/nvflare/data"
BATCH_SIZE = 4

transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])


class CIFAR10DataModule(LightningDataModule):
    def __init__(self, data_dir: str = DATASET_PATH, batch_size: int = BATCH_SIZE):
        super().__init__()
        self.data_dir = data_dir
        self.batch_size = batch_size

    def prepare_data(self):
        torchvision.datasets.CIFAR10(root=self.data_dir, train=True, download=True, transform=transform)
        torchvision.datasets.CIFAR10(root=self.data_dir, train=False, download=True, transform=transform)

    def setup(self, stage: str):
        # Assign train/val datasets for use in dataloaders
        if stage == "fit" or stage == "validate":
            cifar_full = torchvision.datasets.CIFAR10(
                root=self.data_dir, train=True, download=False, transform=transform
            )
            self.cifar_train, self.cifar_val = random_split(cifar_full, [0.8, 0.2])

        # Assign test dataset for use in dataloader(s)
        if stage == "test" or stage == "predict":
            self.cifar_test = torchvision.datasets.CIFAR10(
                root=self.data_dir, train=False, download=False, transform=transform
            )

    def train_dataloader(self):
        return DataLoader(self.cifar_train, batch_size=self.batch_size)

    def val_dataloader(self):
        return DataLoader(self.cifar_val, batch_size=self.batch_size)

    def test_dataloader(self):
        return DataLoader(self.cifar_test, batch_size=self.batch_size)

    def predict_dataloader(self):
        return DataLoader(self.cifar_test, batch_size=self.batch_size)


def main():
    model = LitNet()
    cifar10_dm = CIFAR10DataModule()
    if torch.cuda.is_available():
        trainer = Trainer(max_epochs=1, accelerator="gpu", devices=1 if torch.cuda.is_available() else None)
    else:
        trainer = Trainer(max_epochs=1, devices=None)

    # (2) patch the lightning trainer
    flare.patch(trainer)

    while flare.is_running():
        # (3) receives FLModel from NVFlare
        # Note that we don't need to pass this input_model to trainer
        # because after flare.patch the trainer.fit/validate will get the
        # global model internally
        input_model = flare.receive()
        print(f"\n[Current Round={input_model.current_round}, Site = {flare.get_site_name()}]\n")

        # (4) evaluate the current global model to allow server-side model selection
        print("--- validate global model ---")
        trainer.validate(model, datamodule=cifar10_dm)

        # perform local training starting with the received global model
        print("--- train new model ---")
        trainer.fit(model, datamodule=cifar10_dm)

        # test local model
        print("--- test new model ---")
        trainer.test(ckpt_path="best", datamodule=cifar10_dm)

        # get predictions
        print("--- prediction with new best model ---")
        trainer.predict(ckpt_path="best", datamodule=cifar10_dm)


if __name__ == "__main__":
    main()
`;

const serverCode_lt = `
from .base_fedavg import BaseFedAvg

class FedAvg(BaseFedAvg):
    def run(self) -> None:
        self.info("Start FedAvg.")

        model = self.load_model()
        model.start_round = self.start_round
        model.total_rounds = self.num_rounds

        for self.current_round in range(self.start_round, self.start_round + self.num_rounds):
            self.info(f"Round {self.current_round} started.")
            model.current_round = self.current_round

            clients = self.sample_clients(self.min_clients)

            results = self.send_model_and_wait(targets=clients, data=model)

            aggregate_results = self.aggregate(results)

            model = self.update_model(model, aggregate_results)

            self.save_model(model)

        self.info("Finished FedAvg.")
`;

const jobCode_lt = `
from src.lit_net import LitNet

from nvflare import FedAvg, FedJob, ScriptExecutor

if __name__ == "__main__":
    n_clients = 2
    num_rounds = 2
    train_script = "src/cifar10_lightning_fl.py"

    job = FedJob(name="cifar10_fedavg_lightning")

    # Define the controller workflow and send to server
    controller = FedAvg(
        min_clients=n_clients,
        num_rounds=num_rounds,
    )
    job.to(controller, "server")

    # Define the initial global model and send to server
    job.to(LitNet(), "server")

    # Add clients
    for i in range(n_clients):
        executor = ScriptExecutor(
            task_script_path=train_script, task_script_args=""  # f"--batch_size 32 --data_path /tmp/data/site-{i}"
        )
        job.to(executor, f"site-{i}", gpu=0)

    # job.export_job("/tmp/nvflare/jobs/job_config")
    job.simulator_run("/tmp/nvflare/jobs/workdir")
`;

const clientCode_pt = `
###############################
# PyTorch Training and Validation Code
# Adapted from 'PyTorch: Training a Classifier' (https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html)

import torch
import torch.nn as nn
import torchvision

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1) # flatten all dimensions except batch
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

def load_data():
    transform = torchvision.transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
    batch_size = 4
    trainset = torchvision.datasets.CIFAR10(root=dataset_path, train=True, download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=num_workers)
    testset = torchvision.datasets.CIFAR10(root=dataset_path, train=False, download=True, transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=num_workers)
    return trainloader, testloader

def train(input_model, trainloader, client_id):
    net = Net()
    net.load_state_dict(input_model.params)

    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

    # (optional) use GPU to speed things up
    net.to(DEVICE)

    for epoch in range(local_epochs):  # loop over the dataset multiple times

        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs; data is a list of [inputs, labels]
            # (optional) use GPU to speed things up
            inputs, labels = data[0].to(DEVICE), data[1].to(DEVICE)

            # zero the parameter gradients
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 2000 == 1999:  # print every 2000 mini-batches
                print(f"({client_id}) [{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}")
                running_loss = 0.0

    print(f"({client_id}) Finished Training")

def evaluate(input_model, testloader, client_id):
    net = Net()
    net.load_state_dict(input_model.params)
    # (optional) use GPU to speed things up
    net.to(DEVICE)

    correct = 0
    total = 0
    # since we're not training, we don't need to calculate the gradients for our outputs
    with torch.no_grad():
        for data in testloader:
            # (optional) use GPU to speed things up
            images, labels = data[0].to(DEVICE), data[1].to(DEVICE)
            # calculate outputs by running images through the network
            outputs = net(images)
            # the class with the highest energy is what we choose as prediction
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct // total
    print("({client_id}) Accuracy of the network on the 10000 test images: {accuracy}")
    return accuracy

transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
trainset = torchvision.datasets.CIFAR10(root=dataset_path, train=True, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=num_workers)
testset = torchvision.datasets.CIFAR10(root=dataset_path, train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=num_workers)

###############################
# FLARE Client Code

import nvflare.client as flare

# initialize NVFlare client API
flare.init()

# run continuously when launching once
while flare.is_running():

  # receive FLModel from NVFlare
  input_model = flare.receive()
  client_id = flare.get_site_name()

  # perform local training on received model
  net = train(input_model, trainloader, client_id)

  # perform local validation
  accuracy = evaluate(input_model, testloader, client_id)

  # construct output FLModel
  output_model = flare.FLModel(
    params=net.cpu().state_dict(),
    metrics={"accuracy": accuracy},
  )

  # send model back to NVFlare
  flare.send(output_model)
`;

const serverCode_pt = `
from .base_fedavg import BaseFedAvg

class FedAvg(BaseFedAvg):
    def run(self) -> None:
        self.info("Start FedAvg.")

        model = self.load_model()
        model.start_round = self.start_round
        model.total_rounds = self.num_rounds

        for self.current_round in range(self.start_round, self.start_round + self.num_rounds):
            self.info(f"Round {self.current_round} started.")
            model.current_round = self.current_round

            clients = self.sample_clients(self.min_clients)

            results = self.send_model_and_wait(targets=clients, data=model)

            aggregate_results = self.aggregate(results)

            model = self.update_model(model, aggregate_results)

            self.save_model(model)

        self.info("Finished FedAvg.")
`;

const jobCode_pt = `
from src.cifar10_fl import Net
from nvflare import FedAvg, FedJob, ScriptExecutor

if __name__ == "__main__":
    n_clients = 2
    num_rounds = 2
    train_script = "src/cifar10_fl.py"

    job = FedJob(name="cifar10_fedavg")

    # Define the controller workflow and send to server
    controller = FedAvg(
        min_clients=n_clients,
        num_rounds=num_rounds,
    )
    job.to(controller, "server")

    # Define the initial global model and send to server
    job.to(Net(), "server")

    # Add clients
    for i in range(n_clients):
        executor = ScriptExecutor(
            task_script_path=train_script, task_script_args=""  # f"--batch_size 32 --data_path /tmp/data/site-{i}"
        )
        job.to(executor, f"site-{i}", gpu=0)

    # job.export_job("/tmp/nvflare/jobs/job_config")
    job.simulator_run("/tmp/nvflare/jobs/workdir")
`;

const highlightedInstallCode = Prism.highlight(
  installCode_pt,
  Prism.languages.python,
  "python"
);
const highlightedClientCode = Prism.highlight(
  clientCode_pt,
  Prism.languages.python,
  "python"
);
const highlightedServerCode = Prism.highlight(
  serverCode_pt,
  Prism.languages.python,
  "python"
);
const highlightedConfigCode = Prism.highlight(
  jobCode_pt,
  Prism.languages.python,
  "python"
);

const code_sections = [
  {
    id: "install-pytorch",
    section: "install",
    framework: "pytorch",
    title: "Installation",
    description:
      "Install the required dependencies for this example.",
    code: highlightedClientCode,
  },
  {
    id: "client-pytorch",
    section: "client",
    framework: "pytorch",
    title: "Client Code (train.py)",
    description:
      "We use the Client API to convert the centralized training PyTorch code into federated learning code with only a few lines of changes. Essentially the client will receive a model from FLARE, perform local training and validation, and then send the model back to FLARE.",
    code: highlightedClientCode,
  },
  {
    id: "server-pytorch",
    section: "server",
    framework: "pytorch",
    title: "Server Code (fedavg.py)",
    description:
      "The Controller API is used to write a federated routine with mechanisms for distributing and receiving models from clients. Here we implement the basic FedAvg algorithm (using some commonly used helper functions in BaseFedAvg).",
    code: highlightedClientCode,
  },
  {
    id: "job-pytorch",
    section: "job",
    framework: "pytorch",
    title: "Job Code (hello_pt_job.py)",
    description:
      "Lastly we construct our FLARE job with our 'train.py' client script and 'FedAvg' server controller. We then run the job with the FL simulator.",
    code: highlightedClientCode,
  },
]

---

<div class="bg-white py-24 sm:py-24">
  <div class="mx-auto max-w-[1500px] px-6 lg:px-8">
    <div class="mx-auto max-w-5xl text-center">
      <h2
        class="text-4xl lg:text-5xl font-bold lg:tracking-tight text-gray-900">
        Quickstart
      </h2>
      <p class="text-lg mt-4 text-slate-600 w-3/4 m-auto">
        Quickly get started with these example code blocks below, where we showcase how simple it is to adapt
        a popular machine learning framework to a federated learning scenario with FLARE.
        For more details, refer to the getting started guide below.
      </p>
      
    </div>

    <div id="download_buttons" class="flex flex-wrap -mb-px text-xl font-medium text-center place-content-center mt-4">
      <!-- Framework Dropdown -->
      <button id="dropdownFrameworkButton" data-dropdown-toggle="framework-dropdown" class="text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-1 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
        <span class="inline-flex items-center">
            <svg class="w-5 h-5 text-gray-800 dark:text-white me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14"/>
            </svg>
            <!-- <span class="text-xs font-semibold">PyTorch</span> -->
            <!-- Framework Label -->
            <span id="framework-pytorch-label" class="text-xs font-semibold w-16">PyTorch</span>
            <span id="framework-lightning-label" class="text-xs font-semibold w-16">Lightning</span>
            <span id="framework-tensorflow-label" class="text-xs font-semibold w-16">TensorFlow</span>
            <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
            </svg>
        </span>
      </button>

      <div id="framework-dropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-lg dark:bg-gray-700 m-0.5 px-2.5">
        <ul class="flex-column h-fit space-y -mb-px py-2 text-sm" id="default-styled-tab" data-tabs-toggle="#default-styled-tab-content" data-tabs-active-classes="text-gray-900 bg-gray-100" data-tabs-inactive-classes="dark:border-transparent text-gray-500 hover:text-gray-900 dark:text-gray-400 border-transparent hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300" role="tablist">
          <li class="" role="presentation">
              <button class="rounded-lg block px-4 py-2 dark:hover:text-white w-full" id="client-tab" data-tabs-target="#framework-pytorch-label" type="button" role="tab" aria-controls="profile" aria-selected="false">PyTorch</button>
          </li>
          <li class="" role="presentation">
              <button class="rounded-lg block px-4 py-2 dark:hover:text-white w-full" id="controller-tab" data-tabs-target="#framework-lightning-label" type="button" role="tab" aria-controls="dashboard" aria-selected="false">Lightning</button>
          </li>
          <li class="" role="presentation">
              <button class="rounded-lg block px-4 py-2 dark:hover:text-white w-full" id="job-tab" data-tabs-target="#framework-tensorflow-label" type="button" role="tab" aria-controls="settings" aria-selected="false">TensorFlow</button>
          </li>
        </ul>
      </div>

      <!-- Google Colab Button -->
      <a href="https://colab.research.google.com/github/NVIDIA/NVFlare/blob/main/examples/tutorials/flare_simulator.ipynb" class="text-xs font-semibold text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
        <span id="default-message" class="inline-flex items-center">
          <svg class="w-0 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
              <img class="w-6 me-1.5" src={GoogleColab.src} alt="NVIDIA logo">
          </svg>
          <span class="text-xs font-semibold">Run in Google Colab</span>
        </span>
      </a>

      <!-- Download Notebook Button -->
      <a href="https://github.com/NVIDIA/NVFlare/blob/main/examples/tutorials/flare_simulator.ipynb" class="text-xs font-semibold text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
        <span id="default-message" class="inline-flex items-center">
          <svg class="w-3 h-3 text-gray-800 dark:text-white me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 18">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 1v11m0 0 4-4m-4 4L4 8m11 4v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3"/>
          </svg>
          <span class="text-xs font-semibold">Download Notebook</span>
        </span>
      </a>
    </div>

    <!-- Installation -->
    <div class="mx-auto max-w-5xl py-4 text-left">
      <h2 class="text-2xl font-bold text-gray-900 mb-2">Installation</h2>
      <p class="text-slate-900 mb-4">
        Install the required dependencies for this example.
      </p>
      <pre
        class="rounded-lg border-2 border-nvidia-light border-solid bg-white p-4 text-sm text-pretty mb-6"
        set:html={highlightedInstallCode}
      />
    </div>

    <!-- Install wrapper -->
    <div id="install-wrapper" class="mx-auto max-w-5xl py-4 text-left"></div>

    <div class="mx-auto max-w-[1500px] py-4 text-left inline-flex">
      <!-- Client, Server, Job Tabs -->
      <ul class="flex-column h-fit border-r space-y -mb-px text-xl font-medium mr-14 ms-1" id="default-styled-tab" data-tabs-toggle="#default-styled-tab-content" data-tabs-active-classes="stroke-nvidia text-nvidia hover:text-nvidia dark:text-nvidia-light dark:hover:text-nvidia-light border-nvidia dark:border-nvidia-light" data-tabs-inactive-classes="stroke-gray-500 hover:stroke-gray-600 dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-transparent hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300" role="tablist">
        <li class="" role="presentation">
          <button class="w-36 inline-block p-5 border-r-2 font-bold text-left" id="client-tab" data-tabs-target="#client-code" type="button" role="tab" aria-controls="profile" aria-selected="false">
            <span id="default-message" class="inline-flex items-center py-2.5">
              <svg class="w-8 h-8 text-gray-800 dark:text-white mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v5m-3 0h6M4 11h16M5 15h14a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1Z"/>
              </svg>              
              Client
            </span>
          </button>
        </li>
        <li class="" role="presentation">
          <button class="w-36 inline-block p-5 border-r-2 font-bold text-left" id="server-tab" data-tabs-target="#controller-code" type="button" role="tab" aria-controls="profile" aria-selected="false">
            <span id="default-message" class="inline-flex items-center py-2.5">
              <svg class="w-8 h-8 text-gray-800 dark:text-white mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1M5 12h14M5 12a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1m-2 3h.01M14 15h.01M17 9h.01M14 9h.01"/>
              </svg>                           
              Server
            </span>
          </button>
        </li>
        <li class="" role="presentation">
          <button class="w-36 inline-block p-5 border-r-2 font-bold text-left" id="job-tab" data-tabs-target="#job-code" type="button" role="tab" aria-controls="profile" aria-selected="false">
            <span id="default-message" class="inline-flex items-center py-2.5">
              <svg class="w-8 h-8 text-gray-800 dark:text-white mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 3v4a1 1 0 0 1-1 1H5m5 4-2 2 2 2m4-4 2 2-2 2m5-12v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1Z"/>
              </svg>                          
              Job
            </span>
          </button>
        </li>
        <!-- <li class="" role="presentation">
            <button class="w-28 inline-block p-7 border-r-2 font-bold text-left hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" id="controller-tab" data-tabs-target="#controller-code" type="button" role="tab" aria-controls="dashboard" aria-selected="false">Server</button>
        </li>
        <li class="" role="presentation">
            <button class="w-28 inline-block p-7 border-r-2 font-bold text-left hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" id="job-tab" data-tabs-target="#job-code" type="button" role="tab" aria-controls="settings" aria-selected="false">Job</button>
        </li> -->
      </ul>

      <!-- Changing Code Sections -->

      <!-- Client wrapper -->
      <div id="client-wrapper" class="mx-auto max-w-5xl py-4 text-left"></div>
      <!-- Server wrapper -->
      <div id="server-wrapper"class="mx-auto max-w-5xl py-4 text-left"></div>
       <!-- Job wrapper -->
      <div id="job-wrapper" class="mx-auto max-w-5xl py-4 text-left"></div>

      <!-- Client Code section -->
      <div class="mx-auto max-w-5xl py-4 text-left" id="client-code" role="tabpanel" aria-labelledby="profile-tab">
        
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Client Code (cifar10_fl.py)</h2>
        <p class="text-slate-900 mb-4">
          We use the Client API to convert the centralized training PyTorch code into federated learning code with
          only a few lines of changes. Essentially the client will receive a model from FLARE, perform local training
          and validation, and then send the model back to FLARE.
        </p>
        <div class="relative rounded-lg border-2 border-nvidia-light border-solid bg-white p-4 text-sm text-pretty overflow-x-auto">
          <button data-copy-to-clipboard-target="client-code-block" data-copy-to-clipboard-content-type="textContent" data-copy-to-clipboard-html-entities="true" class="absolute top-2 right-2 z-0 text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
            <span id="default-message" class="inline-flex items-center">
                <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                    <path d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                </svg>
                <span class="text-xs font-semibold">Copy</span>
            </span>
          </button>
          <pre
            id="client-code-block"
            set:html={highlightedClientCode}
          />
        </div>
      </div>
      <!-- Server Code section -->
      <div class="mx-auto max-w-5xl py-4 text-left" id="controller-code" role="tabpanel" aria-labelledby="dashboard-tab">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Server Code (fedavg.py)</h2>
        <p class="text-slate-900 mb-4">
          The Controller API is used to write a federated routine with mechanisms for distributing and receiving models from clients.
          Here we implement the basic FedAvg algorithm (using some commonly used helper functions in BaseFedAvg).
        </p>
        <div class="relative rounded-lg border-2 border-nvidia-light border-solid bg-white p-4 text-sm text-pretty overflow-x-auto">
          <button data-copy-to-clipboard-target="client-code-block" data-copy-to-clipboard-content-type="textContent" data-copy-to-clipboard-html-entities="true" class="absolute top-2 right-2 text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
            <span id="default-message1" class="inline-flex items-center">
                <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                    <path d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                </svg>
                <span class="text-xs font-semibold">Copy</span>
            </span>
          </button>
          <pre
            id="controller-code-block"
            set:html={highlightedServerCode}
          />
        </div>
      </div>
      <!-- Job Code section -->
      <div class="mx-auto max-w-5xl py-4 text-left" id="job-code" role="tabpanel" aria-labelledby="settings-tab">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Job Code (fedavg_script_executor_cifar10.py)</h2>
        <p class="text-slate-900 mb-4">
          Lastly we construct our FLARE job with our 'cifar10_fl.py' client script and 'FedAvg' server controller.
          We then run the job with the FL simulator.
        </p>
        <div class="relative rounded-lg border-2 border-nvidia-light border-solid bg-white p-4 text-sm text-pretty overflow-x-auto">
          <button data-copy-to-clipboard-target="client-code-block" data-copy-to-clipboard-content-type="textContent" data-copy-to-clipboard-html-entities="true" class="absolute top-2 right-2 text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
            <span id="default-message2" class="inline-flex items-center">
                <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                    <path d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                </svg>
                <span class="text-xs font-semibold">Copy</span>
            </span>
          </button>
          <pre
            id="job-code-block"
            set:html={highlightedConfigCode}
          />
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{code_sections}} is:inline>
  const installWrapper = document.getElementById('install-wrapper');
  const clientWrapper = document.getElementById('client-wrapper');
  const serverWrapper = document.getElementById('server-wrapper');
  const jobWrapper = document.getElementById('job-wrapper');







  const tutorialsWrapper = document.getElementById('tutorials-wrapper');
  const checkboxes = document.querySelectorAll('.check');
  const filtersContainer = document.getElementById('filter-categories');
  const searchInput = document.getElementById('search-bar');



  // Initialize tutorials
  const codeElements = [];

  // Loop over the tutorials and create the tutorial elements
  code_sections.forEach((code_section) => {
    const codeElement = createCodeElement(code_section);
    codeElements.push(codeElement);
    //tutorialsWrapper.appendChild(tutorialElement);
  });

  // Add filter event listeners
  filtersContainer.addEventListener('change', filterTutorials);
  searchInput.addEventListener('input', filterTutorials);
  searchInput.addEventListener('input', filterTutorials);

  // Create tutorial element
  function createCodeElement(code_section) {
    const codeElement = document.createElement('div');

    //tutorialElement.className = 'item space-y-2';

    codeElement.innerHTML = `
    
      <div class="mx-auto max-w-5xl py-4 text-left" id=${code_section.id} role="tabpanel" aria-labelledby="profile-tab">
        <h2 class="text-2xl font-bold text-gray-900 mb-2">${code_section.title}</h2>
        <p class="text-slate-900 mb-4">
          ${code_section.description}
        </p>
        <div class="relative rounded-lg border-2 border-nvidia-light border-solid bg-white p-4 text-sm text-pretty overflow-x-auto">
          <button data-copy-to-clipboard-target=${code_section.id + "-block"} data-copy-to-clipboard-content-type="textContent" data-copy-to-clipboard-html-entities="true" class="absolute top-2 right-2 z-0 text-gray-900 dark:text-gray-400 m-0.5 hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-600 dark:hover:bg-gray-700 rounded-lg py-2 px-2.5 inline-flex items-center justify-center bg-white border-gray-200 border">
            <span id="default-message" class="inline-flex items-center">
                <svg class="w-3 h-3 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                    <path d="M16 1h-3.278A1.992 1.992 0 0 0 11 0H7a1.993 1.993 0 0 0-1.722 1H2a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2Zm-3 14H5a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2Zm0-4H5a1 1 0 0 1 0-2h8a1 1 0 1 1 0 2Zm0-5H5a1 1 0 0 1 0-2h2V2h4v2h2a1 1 0 1 1 0 2Z"/>
                </svg>
                <span class="text-xs font-semibold">Copy</span>
            </span>
          </button>
          <pre
            id=${code_section.id + "-block"}
            set:html=${code_section.code}
          />
        </div>
      </div>`;

    return codeElement;
  }

  // Filter tutorials by search or checkbox
  function setCodeBlocks() {

    // Get framework
    const framework = "pytorch" // TODO

    // codeElements.
    installWrapper.appendChild()


    // Get search term
    const searchTerm = searchInput.value.trim().toLowerCase();
    // Get checked categories
    const checkedCategories = Array.from(checkboxes)
      .filter((check) => check.checked)
      .map((check) => check.id);

    // Loop over tutorials and check for matches
    tutorialElements.forEach((tutorialElement, index) => {
      const tutorial = guides[index];

      // Check to see if tutorial matches the search or checked items
      const matchesSearchTerm = tutorial.title.toLowerCase().includes(searchTerm);

      var isInCheckedCategory = checkedCategories.length === 0;
      tutorial.tags.forEach((tag) => {
        if (checkedCategories.includes(tag)) {
          isInCheckedCategory = true;
        }
      });

      // Show or hide tutorial based on matches
      if (matchesSearchTerm && isInCheckedCategory) {
        tutorialElement.classList.remove('hidden');
      } else {
        tutorialElement.classList.add('hidden');
      }
    });
  }

  // Filter tutorials by search or checkbox
  function filterTutorials() {
    // Get search term
    const searchTerm = searchInput.value.trim().toLowerCase();
    // Get checked categories
    const checkedCategories = Array.from(checkboxes)
      .filter((check) => check.checked)
      .map((check) => check.id);

    // Loop over tutorials and check for matches
    tutorialElements.forEach((tutorialElement, index) => {
      const tutorial = guides[index];

      // Check to see if tutorial matches the search or checked items
      const matchesSearchTerm = tutorial.title.toLowerCase().includes(searchTerm);

      var isInCheckedCategory = checkedCategories.length === 0;
      tutorial.tags.forEach((tag) => {
        if (checkedCategories.includes(tag)) {
          isInCheckedCategory = true;
        }
      });

      // Show or hide tutorial based on matches
      if (matchesSearchTerm && isInCheckedCategory) {
        tutorialElement.classList.remove('hidden');
      } else {
        tutorialElement.classList.add('hidden');
      }
    });
  }
</script>


