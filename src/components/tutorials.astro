---
const highlights = [
  {
    title: "Highlighted #1",
    tags: ["beginner", "tools", "algorithm", "deployment", "simulation"],
    description: "Shows how to use the FLARE Simulator to run a local simulation with multi-process settings within a single computer, offering quick response and debugging.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/tutorials/flare_simulator.ipynb"
  },
  {
    title: "Highlighted #2",
    tags: ["beginner", "tools", "algorithm", "deployment", "simulation"],
    description: "Simulates real-world deployment on a local host with different processes represent server, clients, and an admin console.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/tutorials/setup_poc.ipynb"
  },
  {
    title: "Highlighted #3",
    tags: ["beginner", "tools", "algorithm", "deployment"],
    description:
      "Learn how to launch FLARE with docker compose using the DockerBuilder.",
    link: "https://nvflare.readthedocs.io/en/main/user_guide/docker_compose.html",
  },
]

const tutorials = [
  {
    title: "Intro to the FL Simulator",
    tags: ["beginner", "tools", "simulation"],
    description: "Shows how to use the FLARE Simulator to run a local simulation with multi-process settings within a single computer, offering quick response and debugging.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/tutorials/flare_simulator.ipynb"
  },
  {
    title: "NVFLARE in POC Mode",
    tags: ["beginner", "tools", "simulation"],
    description: "Simulates real-world deployment on a local host with different processes represent server, clients, and an admin console.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/tutorials/setup_poc.ipynb"
  },
  {
    title: "Running FLARE in Docker",
    tags: ["beginner", "deployment"],
    description:
      "Learn how to launch FLARE with docker compose using the DockerBuilder.",
    link: "https://nvflare.readthedocs.io/en/main/user_guide/docker_compose.html",
  },
  {
    title: "FLARE API",
    tags: ["beginner", "tools", "management"],
    description: "Enables users to manage and run jobs directly programmatically with python code.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/tutorials/flare_api.ipynb"
  },
  {
    title: "Job CLI",
    tags: ["beginner", "tools", "management"],
    description: "Use the Job CLI for options to create and submit jobs from a command line interface in POC or production environments.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/tutorials/job_cli.ipynb"
  },
  {
    title: "Operating FLARE: Admin Client, Commands, FLARE API",
    tags: ["intermediate", "tools", "management"],
    description:
      "Familiarize yourself with the commands and functionalities of the admin client, which allows you to manage your FLARE system.",
    link: "https://colab.research.google.com/github/NVIDIA/NVFlare/blob/main/examples/tutorials/flare_api.ipynb",
  },
  {
    title: "FL Experiment Tracking with TensorBoard Streaming",
    tags: ["intermediate", "tools", "pytorch", "experiment-tracking"],
    description: "Example showcasing the TensorBoard streaming capability from the clients to the server.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/experiment-tracking/tensorboard/README.md"
  },
  {
    title: "FL Experiment Tracking with MLflow",
    tags: ["intermediate", "tools", "pytorch", "experiment-tracking"],
    description: "Example integrating FLARE with MLflow streaming capability from clients to the server.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/experiment-tracking/mlflow/README.md"
  },
  {
    title: "FL Experiment Tracking with Weights and Biases",
    tags: ["intermediate", "tools", "pytorch", "experiment-tracking"],
    description: "Example integrating FLARE with Weights and Biases streaming capability from clients to the server.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/experiment-tracking/wandb/README.md"
  },
  {
    title: "Cloud Deployment",
    tags: ["advanced", "deployment"],
    description:
      "Deploy the FLARE dashboard, server, and clients in the cloud. Learn to use the provided scripts for AWS and Azure.",
    link: "https://nvflare.readthedocs.io/en/main/real_world_fl/cloud_deployment.html",
  },
  {
    title: "Deployment to Kubernetes",
    tags: ["advanced", "deployment"],
    description:
      "How to run FLARE inside Amazon Elastic Kubernetes Service (EKS).",
    link: "https://nvflare.readthedocs.io/en/main/real_world_fl/kubernetes.html",
  },
  {
    title: "Helm Chart Deployment",
    tags: ["advanced", "deployment"],
    description:
      "Learn how to use the HelmChartBuilder to generate reference Helm Chart for users to deploy FLARE to a local microk8s Kubernetes instance.",
    link: "https://nvflare.readthedocs.io/en/main/user_guide/helm_chart.html",
  },
  {
    title: "Secure Provisioning",
    tags: ["advanced", "deployment"],
    description:
      "Learn about the secure provisioning tool for streamlining the process to provision, start, and operate federated learning with a trusted setup.",
    link: "https://nvflare.readthedocs.io/en/main/real_world_fl/overview.html",
  },
  {
    title: "Preflight Check",
    tags: ["advanced", "deployment"],
    description:
      "Perform preliminary checks before starting up an NVFlare subsystem to catch errors early.",
    link: "https://nvflare.readthedocs.io/en/main/user_guide/nvflare_cli/preflight_check.html",
  },
  {
    title: "FLARE Dashboard",
    tags: ["advanced", "deployment"],
    description:
      "Provides a CLI or UI to collect information of clients and users from different organizations, as well as to generate those startup kits for users to download.",
    link: "https://nvflare.readthedocs.io/en/main/user_guide/dashboard_api.html",
  },
  {
    title: "Federated Policies",
    tags: ["advanced", "deployment", "security"],
    description: "Discuss the federated site policies for authorization, resource and data privacy management.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/federated-policies/README.md"
  },
  {
    title: "Custom Authentication",
    tags: ["advanced", "deployment", "security"],
    description: "Demonstrate the custom authentication policy and secure mode.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/custom_authentication/README.md"
  },
  {
    title: "Job-Level Authorization",
    tags: ["advanced", "deployment", "security"],
    description: "Demonstrate the job-level authorization policy and secure mode.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/job-level-authorization/README.md"
  },
  {
    title: "Federated Learning Hub",
    tags: ["advanced", "deployment"],
    description: "Allow hierarchical interaction between several levels of nvflare FL systems, e.g. Tier-1 (hub) and Tier-2 (sub-systems).",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/fl_hub/README.md"
  },
  {
    title: "Step-by-Step CIFAR10 Examples",
    tags: ["beginner", "algorithm", "pytorch", "deep-learning"],
    description: "Step-by-step examples series with CIFAR-10 (image data) to showcase different FLARE features, workflows, and APIs.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/step-by-step/cifar10"
  },
  {
    title: "Step-by-Step HIGGS Examples",
    tags: ["beginner", "algorithm", "pandas", "sklearn", "xgboost"],
    description: "Step-by-step examples series with HIGGS (tabular data) to showcase different FLARE features, workflows, and APIs.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/step-by-step/higgs"
  },
  {
    title: "ML/DL to FL",
    tags: ["beginner", "algorithm", "client-api", "numpy", "pytorch", "tensorflow"],
    description: "Example for converting Deep Learning (DL) to Federated Learning (FL) using the Client API. Configurations for numpy, pytorch, lighting, and tensorflow.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/ml-to-fl"
  },
  {
    title: "Hello Scatter and Gather",
    tags: ["beginner", "algorithm", "numpy", "controller", "executor"],
    description: "Example using the ScatterAndGather workflow to implement Federated Averaging.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/hello-numpy-sag/README.md"
  },
  {
    title: "Hello Cross-Site Validation",
    tags: ["beginner", "algorithm", "numpy", "controller", "executor", "deep-learning"],
    description: "Example using the CrossSiteModelEval workflow for cross site evaluation. Show option to use previous results without training workflow.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/hello-numpy-cross-val/README.md"
  },
  {
    title: "Hello Cyclic Weight Transfer",
    tags: ["beginner", "algorithm", "tensorflow", "controller", "executor", "deep-learning"],
    description: "Example using the CyclicController workflow to implement Cyclic Weight Transfer.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/hello-cyclic/README.md"
  },
  {
    title: "Hello PyTorch",
    tags: ["beginner", "algorithm", "pytorch", "controller", "executor", "deep-learning"],
    description: "Example using an image classifier with FedAvg and PyTorch as the deep learning training framework.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/hello-pt/README.md"
  },
  {
    title: "Hello TensorFlow",
    tags: ["beginner", "algorithm", "tensorflow", "controller", "executor", "deep-learning"],
    description: "Example using an image classifier with FedAvg and TensorFlow as the deep learning training framework.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/hello-world/hello-tf2/README.md"
  },
  {
    title: "Simulated Federated Learning with CIFAR-10",
    tags: ["intermediate", "algorithm", "simulator", "pytorch", "learner", "model-controller-api", "deep-learning"],
    description: "Running FedAvg, FedProx, FedOpt, and SCAFFOLD algorithms using NVFlare's FL simulator.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/cifar10/cifar10-sim/README.md"
  },
  {
    title: "Real-world Federated Learning with CIFAR-10",
    tags: ["intermediate", "algorithm", "poc", "pytorch", "learner", "model-controller-api", "deep-learning", "homomorphic-encryption"],
    description: "Running FedAvg with streaming of TensorBoard metrics to the server during training and homomorphic encryption.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/cifar10/cifar10-real-world/README.md"
  },
  {
    title: "Logistic Regression with Newton-Raphton",
    tags: ["intermediate", "algorithm", "client-api", "model-controller-api", "job-api", "machine-learning"],
    description:
      "Federated binary classification via logistic regression with second-order Newton-Raphson optimization.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/lr-newton-raphson",
  },
  {
    title: "Survival Analysis with Federated Kaplan-Meier",
    tags: ["intermediate", "algorithm", "client-api", "model-controller-api", "job-api", "analytics"],
    description:
      "Kaplan-Meier survival analysis in federated setting without and with secure features via time-binning and Homomorphic Encryption (HE).",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/kaplan-meier-he",
  },
  {
    title: "Swarm Learning",
    tags: ["intermediate", "algorithm", "pytorch", "learner", "deep-learning"],
    description:
      "Example using Swarm Learning and Client-Controlled Cross-site Evaluation workflows.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/swarm_learning",
  },
  {
    title: "Federated Linear Model with Scikit-learn",
    tags: ["intermediate", "algorithm", "sklearn", "machine-learning"],
    description: "Using scikit-learn for federated linear model learning on tabular data.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/sklearn-linear/README.md"
  },
  {
    title: "Federated K-Means Clustering with Scikit-learn",
    tags: ["intermediate", "algorithm", "sklearn", "machine-learning"],
    description: "Using scikit-learn and k-Means for federated clustering on tabular data.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/sklearn-kmeans/README.md"
  },
  {
    title: "Federated SVM with Scikit-learn",
    tags: ["intermediate", "algorithm", "sklearn", "machine-learning"],
    description: "Using scikit-learn and SVM for federated model learning on tabular data.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/sklearn-svm/README.md"
  },
  {
    title: "Histogram-based FL for XGBoost",
    tags: ["advanced", "algorithm", "xgboost", "machine-learning"],
    description: "Histogram-based algorithm for XGBoost.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/xgboost/histogram-based/README.md"
  },
  {
    title: "Tree-based Federated Learning for XGBoost",
    tags: ["advanced", "algorithm", "xgboost", "machine-learning"],
    description: "Tree-based algorithms including bagging and cyclic approaches for XGBoost.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/xgboost/tree-based/README.md"
  },
  {
    title: "Federated Learning for Random Forest based on XGBoost",
    tags: ["advanced", "algorithm", "xgboost", "machine-learning"],
    description: "Example of using FLARE with scikit-learn and Random Forest.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/random_forest/README.md"
  },
  {
    title: "Federated Vertical XGBoost",
    tags: ["advanced", "algorithm", "xgboost", "machine-learning"],
    description: "Example using Private Set Intersection and XGBoost on vertically split HIGGS data.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/vertical_xgboost/README.md"
  },
  {
    title: "NVFlare + MONAI integration",
    tags: ["advanced", "algorithm", "healthcare", "monai", "deep-learning"],
    description: "Using FLARE to train a 3D medical image analysis model using federated averaging (FedAvg) and MONAI Bundle.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/integration/monai/README.md"
  },
  {
    title: "Federated Learning with Differential Privacy for BraTS18 segmentation",
    tags: ["advanced", "algorithm", "healthcare", "differential-privacy", "monai", "deep-learning"],
    description: "Illustrates the use of differential privacy for training brain tumor segmentation models using federated learning.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/brats18/README.md"
  },
  {
    title: "Federated Learning for Prostate Segmentation from Multi-source Data",
    tags: ["advanced", "algorithm", "healthcare", "monai", "deep-learning"],
    description: "Example of training a multi-institutional prostate segmentation model using FedAvg, FedProx, and Ditto.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/prostate/README.md"
  },
  {
    title: "Federated Statistics for Images",
    tags: ["advanced", "algorithm", "pandas", "analytics"],
    description: "Example of gathering local image histogram to compute the global dataset histograms.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/federated-statistics/image_stats/README.md"
  },
  {
    title: "Federated Statistics for DataFrame",
    tags: ["advanced", "algorithm", "pandas", "analytics"],
    description: "Example of gathering local statistics summary from Pandas DataFrame to compute the global dataset statistics.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/federated-statistics/df_stats/README.md"
  },
  {
    title: "MONAI FLARE Integration Experiment Tracking",
    tags: ["advanced", "algorithm", "experiment-tracking", "monai"],
    description: "Example using FLARE and MONAI integration with experiment tracking streaming from clients to server.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/integration/monai/examples/spleen_ct_segmentation_local/README.md#51-experiment-tracking-with-mlflow"
  },
  {
    title: "KeyCloak Site Authentication Integration",
    tags: ["advanced", "algorithm", "security"],
    description: "Demonstrate KeyCloak integration for supporting site-specific authentication.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/keycloak-site-authentication/README.md"
  },
  {
    title: "NLP-NER",
    tags: ["advanced", "algorithm", "huggingface", "deep-learning"],
    description: "Illustrates both BERT and GPT-2 models from Hugging Face on a Named Entity Recognition (NER) task using the NCBI disease dataset.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/nlp-ner/README.md"
  },
  {
    title: "Parameter Efficient Fine Turning",
    tags: ["advanced", "algorithm", "nemo", "deep-learning"],
    description: "Example utilizing NeMo's PEFT methods to adapt a LLM to a downstream task.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/integration/nemo/examples/peft"
  },
  {
    title: "Prompt-Tuning Example",
    tags: ["advanced", "algorithm", "nemo", "deep-learning"],
    description: "Example for using FLARE with NeMo for LLM prompt learning.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/integration/nemo/examples/prompt_learning"
  },
  {
    title: "Supervised Fine Tuning (SFT)",
    tags: ["advanced", "algorithm", "nemo", "deep-learning"],
    description: "Example to fine-tune all parameters of a LLM on supervised data.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/integration/nemo/examples/supervised_fine_tuning"
  },
  {
    title: "LLM Tuning via HuggingFace SFT Trainer",
    tags: ["advanced", "algorithm", "huggingface", "deep-learning"],
    description: "Example for using FLARE with a HuggingFace trainer for LLM tuning tasks.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/llm_hf"
  },
  {
    title: "Federated GNN: Protein Classification",
    tags: ["advanced", "algorithm", "healthcare", "pytorch-geometric", "deep-learning"],
    description: "Example using GNNs for Protein Classification using PPI dataset using GraphSAGE.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/gnn#federated-gnn-on-graph-dataset-using-inductive-learning"
  },
  {
    title: "Federated GNN: Financial Transaction Classification",
    tags: ["advanced", "algorithm", "finance", "pytorch-geometric", "deep-learning"],
    description: "Example using GNNs for Financial Transaction Classification with Elliptic++ dataset using GraphSAGE.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/gnn#federated-gnn-on-graph-dataset-using-inductive-learning"
  },
  {
    title: "Financial Application with Federated XGBoost Methods",
    tags: ["advanced","algorithm", "xgboost", "finance"],
    description: "Example using XGBoost in various ways to train a federated model to perform fraud detection with a finance dataset.",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/finance"
  },
]

const level = ["beginner", "intermediate", "advanced"];
// const flare_misc = ["simulation", "deployment", "management", "experiment-tracking", "security"];
const flare_type = ["algorithm", "tools", "deployment"]
const flare_api = ["client-api", "model-controller-api", "job-api", "learner", "executor", "controller"];
const framework = ["pytorch", "tensorflow", "lightning", "xgboost", "sklearn", "numpy", "nemo", "graphsage", "pytorch-geometric", "monai", "huggingface"];
const application_type = ["machine-learning", "deep-learning", "analytics"];
const industry_domain = ["healthcare", "finance"];
const privacy_algorithm = ["homomorphic-encryption", "differential-privacy"];

const tag_list = [
  {
      name: "Experience Level",
      id: "level",
      list: level,
  },
  {
      name: "Tutorial Category",
      id: "flare-type",
      list: flare_type,
  },
  // {
  //     name: "FLARE Misc",
  //     id: "flare-misc",
  //     list: flare_misc,
  // },
  {
      name: "FLARE API",
      id: "flare-api",
      list: flare_api,
  },
  {
      name: "Framework",
      id: "framework",
      list: framework,
  },
  {
      name: "Application Type",
      id: "application-type",
      list: application_type,
  },
  {
      name: "Industry Domain",
      id: "industry-domain",
      list: industry_domain,
  },
  {
      name: "Privacy Algorithm",
      id: "privacy-algorithm",
      list: privacy_algorithm,
  },
]


---

<div class="bg-white py-16 sm:py-16">
  <div class="mx-auto max-w-[1600px] px-6 lg:px-8">
    <div class="mx-auto max-w-5xl mt-10 flex justify-left">
      <!-- <a href="/nvflare-web" class="text-sm font-semibold leading-6 text-nvidia">
        <span aria-hidden="true">&larr;</span>
        Back to home
      </a> -->
    </div>
    <div class="mx-auto max-w-5xl mt-16 md:mt-0 text-center">
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight">
        Tutorial Catalog
      </h2>
      <p class="text-lg mt-4 text-slate-600 w-3/4 m-auto">
        Explore our extensive catalog of tutorials of FLARE core features and examples for various applications.
        Use the tags below to filter by categories such as level, applications, frameworks, etc.
        or search for keywords.

        For more examples, visit our
        <a class="text-nvidia" href="https://github.com/NVIDIA/NVFlare/tree/main/examples">GitHub</a>.
      </p>
      <!-- <hr class="mt-5 mb-10"> -->
      <!-- Tools/Deployment/Examples -->
      <!-- <div class="mt-5 mb-10 border-b border-gray-200 dark:border-gray-700">
        <ul class="flex flex-wrap -mb-px text-xl font-medium text-center place-content-evenly space-x-10" id="default-styled-tab" data-tabs-toggle="#default-styled-tab-content" data-tabs-active-classes="text-nvidia hover:text-nvidia dark:text-nvidia-light dark:hover:text-nvidia-light border-nvidia dark:border-nvidia-light" data-tabs-inactive-classes="dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-transparent hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300" role="tablist">
            <li class="me-2" role="presentation">
              <button class="inline-block p-4 border-b-2 rounded-t-lg font-bold hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" id="job-tab" data-tabs-target="#examples-wrapper" type="button" role="tab" aria-controls="settings" aria-selected="false">Algorithms</button>
            </li>
            <li class="me-2" role="presentation">
                <button class="inline-block p-4 border-b-2 rounded-t-lg font-bold" id="client-tab" data-tabs-target="#tools-wrapper" type="button" role="tab" aria-controls="profile" aria-selected="false">Tools</button>
            </li>
            <li class="me-2" role="presentation">
                <button class="inline-block p-4 border-b-2 rounded-t-lg font-bold hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" id="controller-tab" data-tabs-target="#deployment-wrapper" type="button" role="tab" aria-controls="dashboard" aria-selected="false">Deployment</button>
            </li>
        </ul>
      </div> -->
    </div>

    <div class="mx-auto max-w-[1600px] py-4 text-left inline-flex">

      <div class="flex-column h-fit border-r border-transparent w-52 mr-12">
        <!-- Search Bar -->
        <form class="flex mb-4">
          <label for="search-bar" class="sr-only">Search</label>
            <div class="relative w-full">
              <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-4 h-4 stroke-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
              </svg>
              <input type="text" id="search-bar" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-nvidia focus:border-nvidia block w-full ps-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search keyword..." />
          </div>
        </form>
        <!-- Filter Categories -->
        <div id="filter-categories" class="ml-2 place-content-center" data-accordion="open" data-active-classes="bg-white dark:bg-gray-500 text-gray-500 dark:text-white" data-inactive-classes="text-gray-500 dark:text-gray-400">
            {
              tag_list.map((category) => (
                <div>
                  <h2 id={category.name} class="">
                    <button type="button" class="flex items-center justify-between mr-4 py-2 font-medium rtl:text-right text-gray-900 border-gray-200 dark:border-gray-700 dark:text-gray-400 gap-3" data-accordion-target={"#" + category.id} aria-expanded="true" aria-controls={category.id}>
                      <span>{category.name}</span>
                      <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"/>
                      </svg>
                    </button>
                  </h2>
                  <div id={category.id} class="hidden flex flex-wrap gap-x-1 w-40" aria-labelledby={category.name}>
                    {category.list.map((tag) => (
                      <ul>
                        <input type="checkbox" id={tag} value="" class="check hidden peer" required="">
                        <label for={tag} class="inline-flex rounded-full peer-checked:bg-green-50 px-2.5 py-0.5 text-xs font-medium text-gray-500 ring-1 ring-inset ring-gray-600/20 peer-checked:ring-green-600/20 text-gray-500 bg-white border-1 border-transparent rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:border-nvidia hover:text-gray-600 dark:peer-checked:text-gray-300 peer-checked:text-green-700 hover:bg-gray-50 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700">
                          {tag}
                        </label>
                      </ul>
                    ))}
                  </div>
                </div>
              ))
            }
        </div>
      </div>
      <!-- Tutorial Cards -->
      <div class="bg-white">
        <div id="gallery" class="relative w-full" data-carousel="slide">
          <!-- Carousel wrapper -->
          <div class="relative h-56 overflow-hidden rounded-lg md:h-96">
              <div id="highlights-wrapper" class="bg-gray-50 max-w-5xl mx-auto grid sm:grid-cols-2 md:grid-cols-3 mt-4 gap-16 p-6"></div>
             
          </div>
          <!-- Slider controls -->
          <button type="button" class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-prev>
              <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                  <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
                  </svg>
                  <span class="sr-only">Previous</span>
              </span>
          </button>
          <button type="button" class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-next>
              <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none">
                  <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                  </svg>
                  <span class="sr-only">Next</span>
              </span>
          </button>
        </div>

        <div id="highlights-wrapper" class="bg-gray-50 max-w-5xl mx-auto grid sm:grid-cols-2 md:grid-cols-3 mt-4 gap-16 p-6"></div>
        <div id="tutorials-wrapper" class="max-w-5xl mx-auto grid sm:grid-cols-2 md:grid-cols-3 mt-16 gap-16"></div>
      </div>
    </div>

  </div>
</div>

<script define:vars={{highlights, tutorials, tag_list}} is:inline>
  
  const checkboxes = document.querySelectorAll('.check');
  const filtersContainer = document.getElementById('filter-categories');
  const searchInput = document.getElementById('search-bar');

  // Initialize tutorials
  const tutorialsWrapper = document.getElementById('tutorials-wrapper');
  const tutorialsElements = [];
  tutorials.forEach((tutorial) => {
    const tutorialElement = createTutorialElement(tutorial);
    tutorialsElements.push(tutorialElement);
    tutorialsWrapper.appendChild(tutorialElement);
  });

  // const deploymentWrapper = document.getElementById('deployment-wrapper');
  // const deploymentElements = [];
  // deployment.forEach((tutorial) => {
  //   const tutorialElement = createTutorialElement(tutorial);
  //   deploymentElements.push(tutorialElement);
  //   deploymentWrapper.appendChild(tutorialElement);
  // });

  const highlightsWrapper = document.getElementById('highlights-wrapper');
  const highlightsElements = [];
  highlights.forEach((tutorial) => {
    const highlightlElement = createTutorialElement(tutorial);
    highlightsElements.push(highlightlElement);
    highlightsWrapper.appendChild(highlightlElement);
  });

  // Add filter event listeners
  filtersContainer.addEventListener('change', filterTutorials);
  searchInput.addEventListener('input', filterTutorials);

  // Create tutorial element
  function createTutorialElement(tutorial) {
    const tutorialElement = document.createElement('div');

    tutorialElement.className = 'item space-y-2';

    let tutorial_tags = tutorial.tags.map((tag) => (
        `<div class="inline-flex rounded-full bg-green-50 px-2.5 py-0.5 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
          ${tag}
        </div>`
    )).join(" ")

    tutorialElement.innerHTML = `
    <div class="flex flex-col gap-1 divide-gray-200 rounded-lg bg-white shadow-md h-80">
      <div>
        <h3 class="font-semibold text-md px-4 pt-2 text-lg">
          ${tutorial.title}
        </h3>
        <div class="px-4 gap-x-2 flex-wrap items-center">
          ${tutorial_tags}
        </div>
      </div>
      <div class="flex-grow overflow-y-auto px-4">
        <p class="text-slate-500 mt-2 leading-relaxed">
          ${tutorial.description}
        </p>
      </div>
      <div class="h-14 flex-shrink-0 flex justify-center items-center border-t border-gray-200">
        <a href="${tutorial.link}" class="rounded-bl-lg border border-transparent py-2 px-4 text-sm font-semibold text-gray-900">
          Go to Tutorial
        </a>
      </div>
    </div>`;

    // tutorialElement.innerHTML = `<div
    //   class="flex gap-4 items-start divide-gray-200 rounded-lg bg-white shadow-md">
    //   <div class="h-80">
    //     <div class="overflow-y-auto">
    //       <h3 class="font-semibold text-md px-4 pt-2 text-lg">
    //         ${tutorial.title}
    //       </h3>
    //       <div class="px-4 py-2 gap-x-2 flex-wrap items-center">
    //         ${tutorial_tags}
    //       </div>
    //       <div class="h-full overflow-y-auto flex-grow">
    //         <p class="text-slate-500 mt-2 leading-relaxed px-4 pb-2">
    //           ${tutorial.description}
    //         </p>
    //       </div>
    //     </div>
    //     <div class="h-14 flex justify-center items-center border-t border-gray-200">
    //       <a
    //         href=${tutorial.link}
    //         class="items-center justify-center rounded-bl-lg border border-transparent py-4 text-sm font-semibold text-gray-900">
    //         Go to Tutorial
    //       </a>
    //     </div>
    // </div>`;

    // tutorialElement.innerHTML = `<div
    //   class="flex gap-4 items-start divide-gray-200 rounded-lg bg-white shadow-md">
    //   <div class="h-80">
    //     <div class="overflow-y-auto">
    //       <h3 class="font-semibold text-md px-4 pt-2 text-lg">
    //         ${tutorial.title}
    //       </h3>
    //       <div class="px-4 py-2 gap-x-2 flex-wrap items-center">
    //         ${tutorial_tags}
    //       </div>
    //       <div class="overflow-y-auto h-32">
    //         <p class="text-slate-500 mt-2 leading-relaxed px-4 pb-2">
    //           ${tutorial.description}
    //         </p>
    //       </div>
    //     </div>
    //     <div class="flex justify-center border-t border-gray-200">
    //       <a
    //         href=${tutorial.link}
    //         class="items-center justify-center rounded-bl-lg border border-transparent py-4 text-sm font-semibold text-gray-900">
    //         Go to Tutorial
    //       </a>
    //     </div>
    // </div>`;

    return tutorialElement;
  }

  function filterHelper(tutorialElements, searchTerm, checkedCategories, tutorial_list) {
    // Loop over tutorials and check for matches
    tutorialElements.forEach((tutorialElement, index) => {
      const tutorial = tutorial_list[index];

      // Check to see if tutorial matches the search or checked items
      const matchesSearchTerm = (
        tutorial.title.toLowerCase().includes(searchTerm) 
        || tutorial.description.toLowerCase().includes(searchTerm)
      );
      
      // var isInCheckedCategory = checkedCategories.length === 0;
      var isInCheckedCategory = true;

      checkedCategories.forEach((tag) => {
        if (!(tutorial.tags.includes(tag))) {
          isInCheckedCategory = false;
        }
      });

      // Show or hide tutorial based on matches
      if (matchesSearchTerm && isInCheckedCategory) {
        tutorialElement.classList.remove('hidden');
      } else {
        tutorialElement.classList.add('hidden');
      }
    });
  }

  // Filter tutorials by search or checkbox
  function filterTutorials() {
    // Get search term
    const searchTerm = searchInput.value.trim().toLowerCase();
    // Get checked categories
    const checkedCategories = Array.from(checkboxes)
      .filter((check) => check.checked)
      .map((check) => check.id);

    filterHelper(tutorialsElements, searchTerm, checkedCategories, tutorials);
    filterHelper(highlightsElements, searchTerm, checkedCategories, highlights);
    // filterHelper(examplesElements, searchTerm, checkedCategories, examples);
  }
</script>