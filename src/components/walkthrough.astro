---
// @ts-ignore

const walkthrough = [
  {
    id: "step1",
    step: "Step 1",
    title: "Introduction to FLARE",
    description:
      "In this introductory guide we cover the core concepts and fundamentals of FLARE to help you get started.",
    button_text: "View Notebook",
    link: "https://github.com/NVIDIA/NVFlare/blob/7055e1ad2adc97c114678f65f36b189f8641ef3e/examples/getting_started/pt/nvflare_pt_getting_started.ipynb",
    video: "https://nvidia-my.sharepoint.com/personal/seyang_nvidia_com/_layouts/15/embed.aspx?UniqueId=5e1b5b52-1bfc-49a2-995d-64cff4370c67&embed=%7B%22hvm%22%3Atrue%2C%22ust%22%3Atrue%7D&referrer=StreamWebApp&referrerScenario=EmbedDialog.Create",
  },
  {
    id: "step2",
    step: "Step 2",
    title: "Server and Client Code",
    description:
      "We dive into an end-to-end federated learning example going through the CIFAR-10 PyTorch FL code shown below.",
    button_text: "View Notebook",
    link: "https://github.com/NVIDIA/NVFlare/blob/7055e1ad2adc97c114678f65f36b189f8641ef3e/examples/getting_started/pt/nvflare_pt_getting_started.ipynb",
    video: "https://nvidia-my.sharepoint.com/personal/seyang_nvidia_com/_layouts/15/embed.aspx?UniqueId=b2fd1012-cfd7-4c03-b91a-e922f990df3a&embed=%7B%22hvm%22%3Atrue%2C%22ust%22%3Atrue%7D&referrer=StreamWebApp&referrerScenario=EmbedDialog.Create",
  },
  {
    id: "step3",
    step: "Step 3",
    title: "FedJob and Simulator",
    description:
      "Formulate a FLARE job and easily run it with the multi-process simulator.",
    button_text: "View Notebook",
    link: "https://github.com/NVIDIA/NVFlare/blob/7055e1ad2adc97c114678f65f36b189f8641ef3e/examples/getting_started/pt/nvflare_pt_getting_started.ipynb",
    video: "https://nvidia-my.sharepoint.com/personal/seyang_nvidia_com/_layouts/15/embed.aspx?UniqueId=09560ecb-f0b6-44b7-9913-033a853e890d&embed=%7B%22hvm%22%3Atrue%2C%22ust%22%3Atrue%7D&referrer=StreamWebApp&referrerScenario=EmbedDialog.Create",
  },
  {
    id: "step4",
    step: "Step 4",
    title: "Federated Kaplan-Meier",
    description:
      "Learn how to formulate a data analysis algorithm under a federated setting using Kaplan-Meier survival analysis.",
    button_text: "View Example",
    link: "https://github.com/NVIDIA/NVFlare/tree/main/examples/advanced/kaplan-meier-he",
    video: "https://nvidia-my.sharepoint.com/personal/ziyuex_nvidia_com/_layouts/15/embed.aspx?UniqueId=fd7e3e23-df96-40d4-a1ce-0440c98c3bd2&embed=%7B%22hvm%22%3Atrue%2C%22ust%22%3Atrue%7D&referrer=StreamWebApp&referrerScenario=EmbedDialog.Create",
  },
  {
    id: "step5",
    step: "Step 5",
    title: "Learn More",
    description:
      "Finally, we cover the next steps in taking federated learning from simulation to the real world.",
    button_text: "View Notebook",
    link: "https://colab.research.google.com/github/NVIDIA/NVFlare/blob/main/examples/tutorials/flare_simulator.ipynb",
    video: "https://nvidia-my.sharepoint.com/personal/seyang_nvidia_com/_layouts/15/embed.aspx?UniqueId=bd0c2cbe-514c-4bb8-a37a-230bba95eae0&embed=%7B%22ust%22%3Atrue%7D&referrer=StreamWebApp&referrerScenario=EmbedDialog.Create",
  },
];
---

<div class="bg-gray-50 py-24 sm:py-24">
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div class="mt-16 md:mt-0 text-center">
      <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight">
        Getting Started with FLARE
      </h2>
      <p class="text-lg mt-4 text-slate-600 w-3/4 m-auto">
        Begin your NVIDIA FLARE journey with these guides
        designed to help you quickly grasp essential concepts.
        Follow along with the videos below, and try it out yourself in the notebooks.
      </p>
    </div>

    <!-- Walkthrough Cards -->
    <div class="glide px-20 py-8 bg-gray-50 bg-opacity-60 rounded-3xl">
      <div class="glide__track" data-glide-el="track">
        <ul class="glide__slides">
          {
            walkthrough.map((item, index) => (
            <li data-index={index} class="slider__frame glide__slide m-6 mb-10 p-4 transition-shadow ease-in-out rounded-lg shadow-md opacity-70" id={item.id} role="presentation">
              <div class="text-left h-44" aria-controls="profile" aria-selected="false">
                <span class="flex items-center text-sm font-semibold leading-6 text-nvidia relative">
                  {item.step}
                  <div
                    class="flex-1 h-px bg-gray-900/10 ml-2"
                    aria-hidden="true"
                  />
                </span>
                <p class="mt-6 text-lg font-semibold leading-8 tracking-tight text-gray-900">
                  {item.title}
                </p>
                <p class="mt-1 text-base leading-7 text-gray-600">
                  {item.description}
                </p>
              </div>
              <p class="mt-16" role="presentation">
                <a
                  href={item.link}
                  class="text-sm font-semibold leading-6 text-green-600">
                  {item.button_text} <span aria-hidden="true">â†’</span>
                </a>
              </p>
            </li>
            ))
          }
        </ul>

      </div>
      <div class="glide__arrows" data-glide-el="controls">
        <!-- Left Carousel Arrow -->
        <button class="glide__arrow glide__arrow--left left-0 shadow-none border-none" data-glide-dir="<">
          <svg class="stroke-gray-400 hover:stroke-nvidia w-12 h-12 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="m15 19-7-7 7-7"/>
          </svg>
        </button>
        <!-- Carousel Bullets -->
        <div class="glide__bullets" data-glide-el="controls[nav]">
          {
            walkthrough.map((item, index) => (
              <button class="glide__bullet h-3 w-3 bg-gray-200 shadow-none" data-glide-dir={"="+index}></button>
            ))
          }
        </div>
        <!-- Right Carousel Arrow -->
        <button class="glide__arrow glide__arrow--right right-0 shadow-none border-none" data-glide-dir=">">
          <div class="h-14 w-14 flex justify-center items-center">
            <svg class="stroke-gray-400 hover:stroke-nvidia w-12 h-12 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="m9 5 7 7-7 7"/>
            </svg>
          </div>
        </button>
      </div>
    </div>

    <!-- Getting Started Videos -->
    <div>
      {
        walkthrough.map((item) => (
          <div id={item.id+"-video"} class="mt-24 flex flex-wrap place-content-center hidden">
            <iframe
              class="h-3/4 w-3/4 aspect-video"
              src={item.video}
              title={item.title}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen>
            </iframe>
          </div>
        ))
      }
    </div>
  
  </div>
</div>

<script src="@glidejs/glide/dist/glide.min.js"></script>

<script>
  import Glide from '@glidejs/glide';

  const config = {
    type: 'slider',
    animationDuration: 300,
    rewind: true,
    bound: false,
    focusAt: 0,
    startAt: 0,
    perView: 3,
    gap: 32,
    peek: {before: 100, after: 0},
    dragThreshold: true,
    breakpoints: {
      1280: {
        perView: 3,
      },
      1024: {
        perView: 2,
      },
      768: {
        perView: 1,
      }
    },
  };
  var glide = new Glide('.glide', config).mount();


  let slides = document.querySelectorAll('.glide__slide');
  for (let slide of slides) {
      slide.addEventListener('click', function () {
          let target = this;
          let targetId = target.dataset.index;
          glide.go('=' + targetId);
      });
  }

  glide.on('move.after', function(event) {
    var slides = document.querySelectorAll('.glide__slide');
    slides.forEach((slide) => {
      var video = document.getElementById(slide.id + "-video");
      if (slide.classList.contains('glide__slide--active')) {
        slide.classList.replace("opacity-70", "opacity-100");
        slide.classList.replace("shadow-md", "shadow-xl");
        slide.classList.add("bg-white");
        video?.classList.remove("hidden");
      } else {
        slide.classList.replace("opacity-100", "opacity-70");
        slide.classList.replace("shadow-xl", "shadow-md");
        slide.classList.remove("bg-white");
        video?.classList.add("hidden");
      }
    });

    var bullets = document.querySelectorAll('.glide__bullet');
    bullets.forEach((bullet) => {
      if (bullet.classList.contains('glide__bullet--active')) {
        bullet.classList.add("ring-1")
        bullet.classList.add("ring-gray-200")
        bullet.classList.replace("bg-gray-200", "bg-white");
      } else {
        bullet.classList.add("ring-1")
        bullet.classList.add("ring-gray-200")
        bullet.classList.replace("bg-white", "bg-gray-200");
      }
    });
  });

</script>
